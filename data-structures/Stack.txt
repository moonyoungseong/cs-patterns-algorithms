Stack<T> 핵심 정리정의: Stack<T>는 LIFO(Last-In, First-Out) 구조의 컬렉션이다.즉, 나중에 넣은 항목이 먼저 나온다.주요 연산Push(item) : 항목 추가(스택의 맨 위에 넣음)T Pop() : 맨 위 항목을 꺼내고 제거T Peek() : 맨 위 항목을 제거하지 않고 조회Count : 현재 스택 크기Clear() : 전체 비우기복잡도: Push/Pop/Peek는 보통 O(1) (상수 시간)언제 쓰나?: “가장 최근 작업을 되돌려야 할 때(Undo)”, “이전 상태로 돌아갈 때”, “깊이 우선 탐색(DFS)”, “함수 호출 스택 모델링” 등2) Stack 장단점 & 사용처장점구현과 사용이 간단함Push/Pop이 빠름 (O(1))Undo/Redo, 뒤로가기(Back), DFS 등 논리적으로 직관적단점중간 항목에 직접 접근 불가 (인덱스 접근이 비직관적)우선순위가 필요하면 부적합 (그럴 땐 PriorityQueue)메모리에 많은 항목을 쌓으면 관리 필요 (메모리/GC 고려)유니티에서 자주 쓰이는 곳 (대표)UI Back Stack: 메뉴/패널 전환 시 뒤로 가기 구현Undo 시스템: 에디터·인게임 편집에서 작업 되돌리기씬 전환 히스토리: 이전 씬 복원(간단히)DFS(경로탐색): 맵/그래프 탐색 구현함수/콜스택 시뮬레이션: 학습용 또는 커스텀 스크립트 호출 추적